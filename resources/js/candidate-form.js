import IMask from 'imask';

// –û–¢–õ–ê–î–û–ß–ù–´–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –í–ê–õ–ò–î–ê–¶–ò–ò –ö–ò–†–ò–õ–õ–ò–¶–´:
console.log('üî§ CYRILLIC VALIDATION DEBUG COMMANDS:');
console.log('=====================================');
console.log('quickTest()              - Run complete test and fix');
console.log('testHobbiesInterests()   - Test Hobbies & Interests fields');
console.log('testStepValidation()     - Test server validation on step 2');
console.log('testLatinInput()         - Test latin validation in real fields');
console.log('testCyrillicValidation() - Check current state');
console.log('forceCyrillicValidation() - Force reinitialize');
console.log('startAutoReinit()        - Auto-fix every 3 seconds');
console.log('testEvents()             - Test Livewire events');
console.log('debugAllEvents()         - Trigger all events manually');
console.log('=====================================');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let phoneMask = null;
let stepCropper = null;
let currentFile = null;
let isInitialized = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
export function initPhoneMask() {
    const phoneInput = document.getElementById('phone-input');
    if (!phoneInput) {
        console.log('Phone input not found');
        return null;
    }

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –º–∞—Å–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
    if (phoneMask) {
        phoneMask.destroy();
    }

    try {
        phoneMask = IMask(phoneInput, {
            mask: '+7 (000) 000-00-00',
            lazy: false,
            placeholderChar: '_'
        });

        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Livewire
        phoneMask.on('accept', function() {
            phoneInput.dispatchEvent(new Event('input', { bubbles: true }));
            phoneInput.dispatchEvent(new Event('change', { bubbles: true }));
        });

        // –ï—Å–ª–∏ –≤ –ø–æ–ª–µ —É–∂–µ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ, –ø—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É
        if (phoneInput.value) {
            phoneMask.value = phoneInput.value;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –æ—Ç Livewire
        if (typeof Livewire !== 'undefined') {
            Livewire.hook('message.processed', () => {
                if (phoneInput.value && phoneMask) {
                    phoneMask.value = phoneInput.value;
                }
            });
        }

        console.log('Phone mask initialized successfully');
        return phoneMask;
    } catch (error) {
        console.error('Error initializing phone mask:', error);
        return null;
    }
}

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è Livewire –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
export function getLivewireComponent() {
    if (typeof Livewire === 'undefined') {
        console.error('Livewire not available');
        return null;
    }

    try {
        // –ú–µ—Ç–æ–¥ 1: –ò—â–µ–º –ø–æ wire:id
        const wireElements = document.querySelectorAll('[wire\\:id]');
        
        for (let element of wireElements) {
            const wireId = element.getAttribute('wire:id');
            if (wireId && Livewire.find) {
                const component = Livewire.find(wireId);
                if (component) {
                    console.log('Found Livewire component by wire:id:', component);
                    return component;
                }
            }
        }
        
        // –ú–µ—Ç–æ–¥ 2: –ò—â–µ–º –ø–æ data-livewire-id
        const dataWireElements = document.querySelectorAll('[data-livewire-id]');
        
        for (let element of dataWireElements) {
            const wireId = element.getAttribute('data-livewire-id');
            if (wireId && Livewire.find) {
                const component = Livewire.find(wireId);
                if (component) {
                    console.log('Found Livewire component by data-livewire-id:', component);
                    return component;
                }
            }
        }

        // –ú–µ—Ç–æ–¥ 3: –ò—â–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç CandidateForm —á–µ—Ä–µ–∑ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if (Livewire.all) {
            const components = Livewire.all();
            for (let component of components) {
                if (component.name === 'candidate-form' || component.__name === 'candidate-form') {
                    console.log('Found CandidateForm component by name:', component);
                    return component;
                }
            }
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –≤–æ–∑—å–º–µ–º –ø–µ—Ä–≤—ã–π
            if (components.length > 0) {
                console.log('Using first available Livewire component:', components[0]);
                return components[0];
            }
        }

        console.error('No Livewire component found');
        return null;
    } catch (error) {
        console.error('Error finding Livewire component:', error);
        return null;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ —Å –∫—Ä–æ–ø–æ–º
export function initPhotoUpload() {
    const photoInput = document.getElementById('photo-input');
    const fallbackInput = document.getElementById('photo-livewire-fallback');
    
    if (!photoInput || !fallbackInput) {
        console.log('Photo inputs not found');
        return;
    }

    // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    photoInput.removeEventListener('change', handlePhotoChange);
    photoInput.addEventListener('change', handlePhotoChange);

    console.log('Photo upload initialized');
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ
function handlePhotoChange(e) {
    const file = e.target.files[0];
    if (!file) return;

    console.log('File selected:', file.name);

    // –ü—Ä–æ–≤–µ—Ä–∫–∏
    if (file.size > 2 * 1024 * 1024) {
        alert('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 2MB');
        e.target.value = '';
        return;
    }

    if (!file.type.match(/image\/(jpeg|jpg|png)/)) {
        alert('–ó–∞–≥—Ä—É–∂–∞–µ–º—ã–π —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (JPG, JPEG, PNG)');
        e.target.value = '';
        return;
    }

    currentFile = file;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∫—Ä–æ–ø–∞
    showCropModal(file);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∫—Ä–æ–ø–∞
function showCropModal(file) {
    const cropModal = document.getElementById('crop-modal');
    const cropImage = document.getElementById('crop-image');
    
    if (!cropModal || !cropImage) {
        // –ï—Å–ª–∏ –Ω–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–≥—Ä—É–∑–∫—É
        console.log('Crop modal not found, using simple upload');
        uploadFileDirectly(file);
        return;
    }

    const reader = new FileReader();
    reader.onload = function(e) {
        cropImage.src = e.target.result;
        cropModal.classList.remove('hidden');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Cropper.js
        if (stepCropper) {
            stepCropper.destroy();
        }
        
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ Cropper.js —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        let attempts = 0;
        const maxAttempts = 20; // 20 –ø–æ–ø—ã—Ç–æ–∫ = 2 —Å–µ–∫—É–Ω–¥—ã
        
        function initCropper() {
            attempts++;
            
            if (typeof Cropper === 'undefined') {
                if (attempts < maxAttempts) {
                    console.log(`Cropper.js not loaded yet, attempt ${attempts}/${maxAttempts}`);
                    setTimeout(initCropper, 100);
                    return;
                } else {
                    console.error('Cropper.js not loaded after max attempts, using simple upload');
                    uploadFileDirectly(file);
                    return;
                }
            }
            
            try {
                stepCropper = new Cropper(cropImage, {
                    aspectRatio: 3 / 4,
                    viewMode: 1,
                    dragMode: 'move',
                    autoCropArea: 0.8,
                    restore: false,
                    guides: true,
                    center: true,
                    highlight: false,
                    cropBoxMovable: true,
                    cropBoxResizable: true,
                    toggleDragModeOnDblclick: false,
                    minCropBoxWidth: 100,
                    minCropBoxHeight: 133,
                    ready: function() {
                        console.log('Cropper ready event fired');
                        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
                        stepCropper.isReady = true;
                    },
                    cropstart: function() {
                        console.log('Cropper cropstart event fired');
                    },
                    error: function(error) {
                        console.error('Cropper error:', error);
                        alert('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—Ä–æ–ø–ø–µ—Ä–∞: ' + error.message);
                    }
                });
                
                console.log('Cropper initialized successfully:', stepCropper);
            } catch (error) {
                console.error('Error initializing Cropper:', error);
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—Ä–æ–ø–ø–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–≥—Ä—É–∑–∫—É.');
                uploadFileDirectly(file);
            }
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        setTimeout(initCropper, 150);
    };
    reader.readAsDataURL(file);
}

// –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –±–µ–∑ –∫—Ä–æ–ø–∞
function uploadFileDirectly(file) {
    const fallbackInput = document.getElementById('photo-livewire-fallback');
    if (fallbackInput) {
        const dataTransfer = new DataTransfer();
        dataTransfer.items.add(file);
        fallbackInput.files = dataTransfer.files;
        fallbackInput.dispatchEvent(new Event('change', { bubbles: true }));
        console.log('Photo uploaded directly via Livewire');
    }
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
export function saveCrop() {
    console.log('saveCrop called');
    
    if (!stepCropper) {
        console.error('Cropper not initialized');
        alert('–û—à–∏–±–∫–∞: –∫—Ä–æ–ø–ø–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return;
    }

    // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫—Ä–æ–ø–ø–µ—Ä–∞
    if (!stepCropper.isReady) {
        console.error('Cropper not ready');
        alert('–ö—Ä–æ–ø–ø–µ—Ä –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        return;
    }

    if (!currentFile) {
        console.error('No file selected');
        alert('–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω');
        return;
    }

    const loadingIndicator = document.getElementById('loading-indicator');
    if (loadingIndicator) loadingIndicator.classList.remove('hidden');

    try {
        console.log('Getting cropped canvas...');
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        const canvas = stepCropper.getCroppedCanvas({
            width: 300,
            height: 400,
            imageSmoothingEnabled: true,
            imageSmoothingQuality: 'high'
        });

        if (!canvas) {
            console.error('getCroppedCanvas returned null');
            if (loadingIndicator) loadingIndicator.classList.add('hidden');
            alert('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–±–ª–∞—Å—Ç—å –¥–ª—è –æ–±—Ä–µ–∑–∫–∏.');
            return;
        }

        console.log('Canvas obtained, converting to blob...');

        canvas.toBlob(function(blob) {
            if (!blob) {
                console.error('toBlob returned null');
                if (loadingIndicator) loadingIndicator.classList.add('hidden');
                alert('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
                return;
            }

            console.log('Blob created:', blob.size, 'bytes');

            // –°–æ–∑–¥–∞–µ–º File –æ–±—ä–µ–∫—Ç
            const file = new File([blob], currentFile.name, {
                type: 'image/jpeg',
                lastModified: Date.now()
            });
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ fallback input
            const fallbackInput = document.getElementById('photo-livewire-fallback');
            if (fallbackInput) {
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(file);
                fallbackInput.files = dataTransfer.files;
                fallbackInput.dispatchEvent(new Event('change', { bubbles: true }));
                
                console.log('Cropped photo uploaded via Livewire');
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                cancelCrop();
                
                if (loadingIndicator) loadingIndicator.classList.add('hidden');
            } else {
                console.error('Fallback input not found');
                if (loadingIndicator) loadingIndicator.classList.add('hidden');
                alert('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ');
            }
        }, 'image/jpeg', 0.9);

    } catch (error) {
        console.error('Error in saveCrop:', error);
        if (loadingIndicator) loadingIndicator.classList.add('hidden');
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–µ–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ' + error.message);
    }
}

// –û—Ç–º–µ–Ω–∏—Ç—å –∫—Ä–æ–ø
export function cancelCrop() {
    const cropModal = document.getElementById('crop-modal');
    const photoInput = document.getElementById('photo-input');
    
    if (stepCropper) {
        stepCropper.destroy();
        stepCropper = null;
    }
    
    if (cropModal) cropModal.classList.add('hidden');
    if (photoInput) photoInput.value = '';
    
    currentFile = null;
    console.log('Crop cancelled');
}

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ
export function removePhoto() {
    console.log('removePhoto called');
    
    try {
        // –ú–µ—Ç–æ–¥ 1: –ü–æ–∏—Å–∫ –∏ –∫–ª–∏–∫ –ø–æ —Å–∫—Ä—ã—Ç–æ–π –∫–Ω–æ–ø–∫–µ (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π)
        const removeBtn = document.getElementById('hidden-remove-photo-btn');
        if (removeBtn) {
            console.log('Calling removePhoto via hidden button click');
            removeBtn.click();
            return;
        }
        
        // –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ —Å wire:click="removePhoto"
        const wireRemoveBtn = document.querySelector('[wire\\:click="removePhoto"]');
        if (wireRemoveBtn) {
            console.log('Calling removePhoto via wire:click button');
            wireRemoveBtn.click();
            return;
        }
        
        // –ú–µ—Ç–æ–¥ 3: –ß–µ—Ä–µ–∑ Livewire.emit
        if (typeof Livewire !== 'undefined' && Livewire.emit) {
            console.log('Trying Livewire.emit for removePhoto');
            Livewire.emit('removePhoto');
            return;
        }
        
        // –ú–µ—Ç–æ–¥ 4: –ß–µ—Ä–µ–∑ dispatch event (Livewire v3)
        if (typeof Livewire !== 'undefined' && Livewire.dispatch) {
            console.log('Trying Livewire.dispatch for removePhoto');
            Livewire.dispatch('removePhoto');
            return;
        }
        
        // –ú–µ—Ç–æ–¥ 5: –ß–µ—Ä–µ–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        const component = getLivewireComponent();
        if (component && component.call) {
            console.log('Calling removePhoto via Livewire component');
            component.call('removePhoto');
            return;
        }
        
        console.error('All methods failed to call removePhoto');
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
        
    } catch (error) {
        console.error('Error in removePhoto:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: ' + error.message);
    }
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
function initializeComponents(force = false) {
    if (isInitialized && !force) {
        console.log('Components already initialized, skipping...');
        return;
    }
    
    console.log('üöÄ Initializing components...', { force });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É —á—Ç–æ–±—ã DOM —Ç–æ—á–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
    setTimeout(() => {
        console.log('üìû Initializing phone mask...');
        initPhoneMask();
        
        console.log('üì∑ Initializing photo upload...');
        initPhotoUpload();
        
        console.log('üî§ Initializing cyrillic validation...');
        initCyrillicValidation();
        
        if (!force) {
            isInitialized = true;
        }
        console.log('‚úÖ All components initialized');
    }, 100);
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
export function isCyrillic(text) {
    if (!text || text.trim() === '') return true; // –ü—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã (–≤–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω–æ)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤ (–±–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    const hasLatinLetters = /[a-zA-Z]/.test(text);
    if (hasLatinLetters) {
        console.log(`‚ùå Text contains latin letters: "${text}"`);
        return false;
    }
    
    // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã, —Ü–∏—Ñ—Ä, –ø—Ä–æ–±–µ–ª–æ–≤, –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
    // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ CyrillicRule
    const cyrillicRegex = /^[–∞-—è—ë\s\-\.',():;‚Ññ\d\u0401\u0451–ê-–Ø–Å/+=!?&\n\r\t]+$/u;
    const isValid = cyrillicRegex.test(text);
    
    console.log(`üîç Cyrillic validation for "${text}": ${isValid ? '‚úÖ Valid' : '‚ùå Invalid'}`);
    return isValid;
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
function showCyrillicError(input, show = true) {
    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –æ—à–∏–±–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ ID –ø–æ–ª—è –∏–ª–∏ wire:model
    let errorId;
    if (input.id) {
        errorId = input.id + '-cyrillic-error';
    } else {
        const wireModel = input.getAttribute('wire:model');
        if (wireModel) {
            // –ó–∞–º–µ–Ω—è–µ–º —Ç–æ—á–∫–∏ –∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ –Ω–∞ –¥–µ—Ñ–∏—Å—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ ID
            errorId = wireModel.replace(/[\.\[\]]/g, '-') + '-cyrillic-error';
        } else {
            errorId = 'field-cyrillic-error';
        }
    }
    
    let errorElement = document.getElementById(errorId);
    
    if (show) {
        if (!errorElement) {
            errorElement = document.createElement('span');
            errorElement.id = errorId;
            errorElement.className = 'cyrillic-error text-red-500 text-sm block mt-1';
            errorElement.setAttribute('data-field', input.getAttribute('wire:model') || input.id || 'unknown');
            errorElement.textContent = '–ü–æ–ª–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã, —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è';
            
            console.log(`üìù Creating cyrillic error element with ID: ${errorId} for field: ${input.getAttribute('wire:model') || input.id}`);
            
            // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –æ—à–∏–±–∫–∏
            let insertAfter = input;
            
            // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ —ç–ª–µ–º–µ–Ω—Ç–∞
            if (insertAfter.nextSibling) {
                insertAfter.parentNode.insertBefore(errorElement, insertAfter.nextSibling);
            } else {
                insertAfter.parentNode.appendChild(errorElement);
            }
        }
        errorElement.style.display = 'block';
        input.classList.add('border-red-500', 'focus:border-red-500', 'focus:ring-red-500');
        input.classList.remove('border-gray-300', 'focus:border-blue-500', 'focus:ring-blue-500');
        
        console.log(`üö® Showing cyrillic error for field: ${input.getAttribute('wire:model') || input.id}`);
    } else {
        if (errorElement) {
            errorElement.style.display = 'none';
        }
        input.classList.remove('border-red-500', 'focus:border-red-500', 'focus:ring-red-500');
        input.classList.add('border-gray-300', 'focus:border-blue-500', 'focus:ring-blue-500');
        
        console.log(`‚úÖ Hiding cyrillic error for field: ${input.getAttribute('wire:model') || input.id}`);
    }
}

// –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è
function validateCyrillicField(input) {
    const value = input.value.trim();
    const isValid = isCyrillic(value);
    
    console.log(`üîç Validating cyrillic for field: ${input.id || input.getAttribute('wire:model')}`, {
        value: `"${value}"`,
        isValid: isValid,
        isEmpty: !value
    });
    
    showCyrillicError(input, !isValid);
    
    return isValid;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
export function initCyrillicValidation() {
    console.log('üî§ Starting cyrillic validation initialization...');
    
    // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ –≤—Å–µ—Ö –ø–æ–ª–µ–π
    removeCyrillicHandlers();
    
    // –ù–∞—Ö–æ–¥–∏–º –í–°–ï input –∏ textarea –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥–∏–º—ã
    const allInputs = document.querySelectorAll('input[type="text"], textarea');
    const allVisibleInputs = Array.from(allInputs).filter(input => {
        return isElementVisible(input) && shouldValidateCyrillic(input);
    });
    
    console.log(`üîç Found ${allVisibleInputs.length} visible inputs/textareas to check for cyrillic`);
    
    let initializedFields = 0;
    
    allVisibleInputs.forEach(input => {
        const identifier = getInputIdentifier(input);
        console.log(`‚úÖ Initializing cyrillic validation for: ${identifier}`);
        initCyrillicField(input, identifier);
        initializedFields++;
    });
    
    console.log(`üî§ Cyrillic validation initialized for ${initializedFields} fields`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–ª–µ –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—É
function shouldValidateCyrillic(input) {
    const wireModel = input.getAttribute('wire:model');
    const id = input.id;
    
    // –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—É
    const cyrillicFields = [
        // Step 1 (–ø–æ ID)
        'last-name-input', 'first-name-input', 'middle-name-input', 
        'birth-place-input', 'current-city-input',
        
        // Step 2 –∏ 3 (–ø–æ wire:model)
        'hobbies', 'interests', 'favorite_sports', 'school', 
        'desired_position', 'employer_requirements'
    ];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ ID
    if (id && cyrillicFields.includes(id)) {
        return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ wire:model
    if (wireModel && cyrillicFields.includes(wireModel)) {
        return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è (—á–ª–µ–Ω—ã —Å–µ–º—å–∏)
    if (wireModel && wireModel.includes('family_members') && wireModel.includes('profession')) {
        return true;
    }
    
    return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ª—è
function getInputIdentifier(input) {
    if (input.id) {
        return `#${input.id}`;
    }
    
    const wireModel = input.getAttribute('wire:model');
    if (wireModel) {
        return `[wire:model="${wireModel}"]`;
    }
    
    return input.tagName.toLowerCase();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
function removeCyrillicHandlers() {
    // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ –≤—Å–µ—Ö –ø–æ–ª–µ–π
    const allInputs = document.querySelectorAll('input[type="text"], textarea');
    allInputs.forEach(input => {
        input.removeEventListener('input', handleCyrillicInput);
        input.removeEventListener('blur', handleCyrillicBlur);
        // –£–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if (input.dataset.cyrillicInit) {
            delete input.dataset.cyrillicInit;
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
function initCyrillicField(input, identifier) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –ø–æ–ª–µ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
    if (input.dataset.cyrillicInit === 'true') {
        console.log(`‚è≠Ô∏è Field already initialized, skipping: ${identifier}`);
        return;
    }
    
    console.log(`üéØ Initializing cyrillic validation for: ${identifier}`, {
        tagName: input.tagName,
        type: input.type,
        hasValue: !!input.value,
        wireModel: input.getAttribute('wire:model')
    });
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    input.removeEventListener('input', handleCyrillicInput);
    input.removeEventListener('blur', handleCyrillicBlur);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    input.addEventListener('input', handleCyrillicInput);
    input.addEventListener('blur', handleCyrillicBlur);
    
    // –ú–∞—Ä–∫–∏—Ä—É–µ–º –ø–æ–ª–µ –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ
    input.dataset.cyrillicInit = 'true';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    input.style.boxShadow = '0 0 0 1px rgba(34, 197, 94, 0.4)';
    setTimeout(() => {
        input.style.boxShadow = '';
    }, 800);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    if (input.value && input.value.trim() !== '') {
        console.log(`üîç Validating existing value: "${input.value}"`);
        validateCyrillicField(input);
    }
}



// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
function handleCyrillicInput(e) {
    const input = e.target;
    const value = input.value;
    
    console.log(`‚å®Ô∏è Cyrillic input event for field: ${input.id || input.getAttribute('wire:model')}`, {
        value: value
    });
    
    // –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    const hasLatinLetters = /[a-zA-Z]/.test(value);
    if (hasLatinLetters && value.trim() !== '') {
        console.log(`üö® Latin letters detected immediately in: ${input.id || input.getAttribute('wire:model')}`);
        validateCyrillicField(input); // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        return;
    }
    
    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º debounce –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    clearTimeout(input.cyrillicTimeout);
    input.cyrillicTimeout = setTimeout(() => {
        console.log(`‚è±Ô∏è Debounced validation for: ${input.id || input.getAttribute('wire:model')}`);
        validateCyrillicField(input);
    }, 500); // –£–≤–µ–ª–∏—á–∏–ª–∏ –¥–æ 500ms –¥–ª—è –æ–±—ã—á–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
function handleCyrillicBlur(e) {
    const input = e.target;
    console.log(`üëÄ Cyrillic blur event for field: ${input.id || input.getAttribute('wire:model')}`);
    validateCyrillicField(input);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
function isElementVisible(element) {
    if (!element) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –∏ –µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª–∏ –Ω–µ —Å–∫—Ä—ã—Ç—ã
    let current = element;
    while (current && current !== document.body) {
        const style = window.getComputedStyle(current);
        if (style.display === 'none' || style.visibility === 'hidden' || style.opacity === '0') {
            return false;
        }
        current = current.parentElement;
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑–º–µ—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–∞
    const rect = element.getBoundingClientRect();
    return rect.width > 0 && rect.height > 0;
}

// –§—É–Ω–∫—Ü–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
function initializeWithRetry(maxAttempts = 5, currentAttempt = 1, force = false) {
    console.log(`Initialization attempt ${currentAttempt}/${maxAttempts}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const phoneInput = document.getElementById('phone-input');
    const photoInput = document.getElementById('photo-input');
    const fallbackInput = document.getElementById('photo-livewire-fallback');
    
    console.log('DOM elements check:', {
        phoneInput: phoneInput ? 'found' : 'not found',
        photoInput: photoInput ? 'found' : 'not found', 
        fallbackInput: fallbackInput ? 'found' : 'not found'
    });
    
    // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º—É–º–∞ –ø–æ–ø—ã—Ç–æ–∫
    if ((phoneInput || photoInput) || currentAttempt >= maxAttempts) {
        if (!isInitialized || force) {
            initializeComponents(force);
        }
        return;
    }
    
    // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 500ms
    setTimeout(() => {
        initializeWithRetry(maxAttempts, currentAttempt + 1, force);
    }, 500);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ DOM
function reinitializeOnDOMChange() {
    console.log('DOM potentially changed, checking for new elements...');
    
    // –í—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è —Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã (—Å force = true)
    setTimeout(() => {
        initializeWithRetry(3, 1, true);
        // –¢–∞–∫–∂–µ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        initCyrillicValidation();
    }, 200);
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML
window.saveCrop = saveCrop;
window.cancelCrop = cancelCrop;
window.removePhoto = removePhoto;
window.initCyrillicValidation = initCyrillicValidation;
window.isCyrillic = isCyrillic;

// –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
window.testCyrillicValidation = function() {
    console.log('üß™ Testing cyrillic validation...');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏
    const testCases = [
        '–ü—Ä–∏–≤–µ—Ç –º–∏—Ä',      // ‚úÖ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏
        'Hello world',     // ‚ùå –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ (–ª–∞—Ç–∏–Ω–∏—Ü–∞)
        '–¢–µ—Å—Ç 123',        // ‚úÖ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏
        'Test, test!',     // ‚ùå –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ (–ª–∞—Ç–∏–Ω–∏—Ü–∞)
        '–†–∞–±–æ—Ç–∞ (8:00-17:00)', // ‚úÖ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏
        '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç',     // ‚úÖ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏
        'Developer',       // ‚ùå –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ (–ª–∞—Ç–∏–Ω–∏—Ü–∞)
        'IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',   // ‚úÖ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏  
        'Web developer',   // ‚ùå –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ (–ª–∞—Ç–∏–Ω–∏—Ü–∞)
        '–°–ø–æ—Ä—Ç, —á—Ç–µ–Ω–∏–µ, –º—É–∑—ã–∫–∞', // ‚úÖ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏
        'Sport, reading',  // ‚ùå –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ (–ª–∞—Ç–∏–Ω–∏—Ü–∞)
        '–ú–æ—Å–∫–≤–∞',          // ‚úÖ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏
        'Moscow',          // ‚ùå –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ (–ª–∞—Ç–∏–Ω–∏—Ü–∞)
        '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',   // ‚úÖ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏
        'John Smith',      // ‚ùå –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ (–ª–∞—Ç–∏–Ω–∏—Ü–∞)
        '',                // ‚úÖ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        '   ',             // ‚úÖ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã
    ];
    
    console.log('üìù Testing cyrillic validation function:');
    testCases.forEach(test => {
        const result = isCyrillic(test);
        console.log(`  "${test}": ${result ? '‚úÖ Valid' : '‚ùå Invalid'}`);
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–µ–π
    console.log('üìä Current field status:');
    const allInputs = document.querySelectorAll('input[type="text"], textarea');
    const visibleInputs = Array.from(allInputs).filter(input => isElementVisible(input));
    console.log(`  Total inputs/textareas: ${allInputs.length}`);
    console.log(`  Visible inputs/textareas: ${visibleInputs.length}`);
    
    const cyrillicInputs = visibleInputs.filter(input => shouldValidateCyrillic(input));
    console.log(`  Fields that should validate cyrillic: ${cyrillicInputs.length}`);
    
    cyrillicInputs.forEach(input => {
        const identifier = getInputIdentifier(input);
        const hasHandler = input.dataset.cyrillicInit === 'true';
        console.log(`    ${identifier}: ${hasHandler ? '‚úÖ Has handler' : '‚ùå No handler'}`);
    });
    
    // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
    console.log('üîÑ Force reinitializing cyrillic validation...');
    initCyrillicValidation();
};

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
window.forceCyrillicValidation = function() {
    console.log('üöÄ Force initializing ONLY cyrillic validation...');
    try {
        initCyrillicValidation();
        console.log('‚úÖ Cyrillic validation force initialized');
    } catch (error) {
        console.error('‚ùå Error force initializing cyrillic validation:', error);
    }
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.startAutoReinit = function(intervalSeconds = 3) {
    console.log(`üîÑ Starting auto-reinit every ${intervalSeconds} seconds...`);
    
    const interval = setInterval(() => {
        console.log('‚è∞ Auto-reinit: Checking for cyrillic validation...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é, –Ω–æ –Ω–µ –∏–º–µ—é—Ç
        const inputs = document.querySelectorAll('input[type="text"], textarea');
        const visibleInputs = Array.from(inputs).filter(input => isElementVisible(input));
        const cyrillicInputs = visibleInputs.filter(input => shouldValidateCyrillic(input));
        const uninitializedInputs = cyrillicInputs.filter(input => input.dataset.cyrillicInit !== 'true');
        
        if (uninitializedInputs.length > 0) {
            console.log(`‚ö†Ô∏è Found ${uninitializedInputs.length} uninitialized cyrillic fields, reinitializing...`);
            
            uninitializedInputs.forEach(input => {
                const identifier = getInputIdentifier(input);
                console.log(`  üîß Reinitializing: ${identifier}`);
            });
            
            try {
                initCyrillicValidation();
                console.log('‚úÖ Auto-reinit: Cyrillic validation reinitialized');
            } catch (error) {
                console.error('‚ùå Auto-reinit: Error reinitializing cyrillic validation:', error);
            }
        } else {
            console.log(`‚úÖ Auto-reinit: All ${cyrillicInputs.length} cyrillic fields are properly initialized`);
        }
    }, intervalSeconds * 1000);
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        console.log('‚èπÔ∏è Stopping auto-reinit after 30 seconds');
        clearInterval(interval);
    }, 30000);
    
    return interval;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
window.stopAutoReinit = function(interval) {
    if (interval) {
        clearInterval(interval);
        console.log('‚èπÔ∏è Auto-reinit stopped manually');
    }
};

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
window.debugAllEvents = function() {
    console.log('üîç Debugging all events...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã
    const eventTypes = [
        'livewire:updated',
        'livewire:message.processed',
        'livewire:morph.updated',
        'livewire:component.updated',
        'livewire:step-changed',
        'livewire:reinitialize-js',
        'step-changed',
        'reinitialize-js'
    ];
    
    eventTypes.forEach(eventType => {
        console.log(`üìù Testing event: ${eventType}`);
        
        // –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
        const testEvent = new CustomEvent(eventType, {
            detail: { step: 999, test: true }
        });
        
        document.dispatchEvent(testEvent);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    setTimeout(() => {
        testCyrillicValidation();
    }, 1000);
};

// –û—Ç–ª–∞–¥–∫–∞ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π Livewire
if (typeof window !== 'undefined') {
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const originalAddEventListener = document.addEventListener;
    document.addEventListener = function(type, listener, options) {
        if (type.includes('livewire') || type.includes('step') || type.includes('reinitialize')) {
            console.log('üìù Registering event listener for:', type);
        }
        return originalAddEventListener.call(this, type, listener, options);
    };
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è Livewire
    const livewireEvents = [
        'livewire:updated',
        'livewire:message.processed',
        'livewire:morph.updated',
        'livewire:component.updated',
        'livewire:step-changed',
        'livewire:reinitialize-js'
    ];
    
    livewireEvents.forEach(eventType => {
        document.addEventListener(eventType, function(event) {
            console.log(`üîç Livewire event detected: ${eventType}`, event.detail);
        });
    });
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π DOM
let lastStepElement = null;
let currentStepNumber = null;

function detectStepChange() {
    // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —à–∞–≥ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
    const stepSelectors = [
        '.step:not(.hidden)',
        '[class*="step"]:not(.hidden)',
        'div[wire\\:if*="currentStep"]',
        '.current-step'
    ];
    
    let activeStep = null;
    for (const selector of stepSelectors) {
        activeStep = document.querySelector(selector);
        if (activeStep) break;
    }
    
    if (activeStep && activeStep !== lastStepElement) {
        console.log('üîÑ Step change detected via DOM observation');
        lastStepElement = activeStep;
        
        // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä —à–∞–≥–∞
        let stepNum = null;
        
        // –ú–µ—Ç–æ–¥ 1: –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        const stepHeader = activeStep.querySelector('h2, h1, .step-title');
        if (stepHeader) {
            const stepText = stepHeader.textContent;
            console.log('Step header text:', stepText);
        }
        
        // –ú–µ—Ç–æ–¥ 2: –ø—Ä–æ–≤–µ—Ä—è–µ–º wire:if –∞—Ç—Ä–∏–±—É—Ç—ã
        const conditionalElements = document.querySelectorAll('[wire\\:if]');
        conditionalElements.forEach(el => {
            const condition = el.getAttribute('wire:if');
            if (condition && condition.includes('currentStep') && !el.classList.contains('hidden')) {
                const match = condition.match(/currentStep\s*===\s*(\d+)/);
                if (match) {
                    stepNum = parseInt(match[1]);
                    console.log('Detected step from wire:if:', stepNum);
                }
            }
        });
        
        if (stepNum && stepNum !== currentStepNumber) {
            currentStepNumber = stepNum;
            console.log(`üéØ Step changed to: ${stepNum} (DOM detection)`);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
            setTimeout(() => {
                console.log(`üî§ DOM Step ${stepNum}: Reinitializing cyrillic validation...`);
                try {
                    initCyrillicValidation();
                    console.log(`‚úÖ DOM Step ${stepNum}: Cyrillic validation reinitialized`);
                } catch (error) {
                    console.error(`‚ùå DOM Step ${stepNum}: Error reinitializing cyrillic validation:`, error);
                }
            }, 100);
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', function() {
    console.log('Candidate form JavaScript loading...');
    
    // –ñ–¥–µ–º Livewire
    function initWhenReady() {
        console.log('Checking for Livewire...');
        if (typeof Livewire !== 'undefined') {
            console.log('Livewire found, initializing...');
            initializeWithRetry();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π DOM
            console.log('üîç Starting DOM step change detection...');
            setInterval(detectStepChange, 500); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 500ms
            
        } else {
            setTimeout(initWhenReady, 200);
        }
    }
    
    // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 500ms —á—Ç–æ–±—ã –¥–∞—Ç—å –≤—Ä–µ–º—è Livewire –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
    setTimeout(initWhenReady, 500);
});

// –°–æ–±—ã—Ç–∏—è Livewire –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
document.addEventListener('livewire:navigated', () => {
    console.log('Livewire navigated event fired - reinitializing');
    isInitialized = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    setTimeout(() => {
        initializeWithRetry();
    }, 200);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ Livewire
document.addEventListener('livewire:updated', () => {
    console.log('üì° Livewire updated event fired - checking for new elements');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –ø—Ä–∏ –ª—é–±–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    setTimeout(() => {
        console.log('üî§ Livewire updated: Reinitializing cyrillic validation...');
        try {
            initCyrillicValidation();
            console.log('‚úÖ Livewire updated: Cyrillic validation reinitialized');
        } catch (error) {
            console.error('‚ùå Livewire updated: Error reinitializing cyrillic validation:', error);
        }
    }, 200);
    
    reinitializeOnDOMChange();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π Livewire
document.addEventListener('livewire:message.processed', () => {
    console.log('üì° Livewire message processed - checking for new elements');
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    setTimeout(() => {
        console.log('üî§ Message processed: Reinitializing cyrillic validation...');
        try {
            initCyrillicValidation();
            console.log('‚úÖ Message processed: Cyrillic validation reinitialized');
        } catch (error) {
            console.error('‚ùå Message processed: Error reinitializing cyrillic validation:', error);
        }
    }, 250);
    
    reinitializeOnDOMChange();
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
document.addEventListener('livewire:morph.updated', () => {
    console.log('üì° Livewire morph updated - reinitializing components');
    
    // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    setTimeout(() => {
        console.log('üî§ Morph updated: Reinitializing cyrillic validation...');
        try {
            initCyrillicValidation();
            console.log('‚úÖ Morph updated: Cyrillic validation reinitialized');
        } catch (error) {
            console.error('‚ùå Morph updated: Error reinitializing cyrillic validation:', error);
        }
    }, 150);
    
    setTimeout(() => {
        reinitializeAllComponents(null, 'morph-updated');
    }, 100);
});

document.addEventListener('livewire:component.updated', () => {
    console.log('üì° Livewire component updated - reinitializing components');
    
    // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    setTimeout(() => {
        console.log('üî§ Component updated: Reinitializing cyrillic validation...');
        try {
            initCyrillicValidation();
            console.log('‚úÖ Component updated: Cyrillic validation reinitialized');
        } catch (error) {
            console.error('‚ùå Component updated: Error reinitializing cyrillic validation:', error);
        }
    }, 150);
    
    setTimeout(() => {
        reinitializeAllComponents(null, 'component-updated');
    }, 100);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —à–∞–≥–æ–≤ - –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω —Å–æ–±—ã—Ç–∏–π
document.addEventListener('livewire:step-changed', (event) => {
    console.log('üì¢ Step changed event received:', event.detail);
    const newStep = event.detail?.step;
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –ø—Ä–∏ —Å–º–µ–Ω–µ —à–∞–≥–æ–≤
    setTimeout(() => {
        console.log(`üî§ Step ${newStep}: Reinitializing cyrillic validation...`);
        try {
            initCyrillicValidation();
            console.log(`‚úÖ Step ${newStep}: Cyrillic validation reinitialized`);
        } catch (error) {
            console.error(`‚ùå Step ${newStep}: Error reinitializing cyrillic validation:`, error);
        }
    }, 300); // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DOM
    
    reinitializeAllComponents(newStep, 'step-changed');
});

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å–º–µ–Ω—ã —à–∞–≥–æ–≤ (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ livewire:)
document.addEventListener('step-changed', (event) => {
    console.log('üì¢ Alternative step-changed event received:', event.detail);
    const newStep = event.detail?.step;
    
    setTimeout(() => {
        console.log(`üî§ Alt Step ${newStep}: Reinitializing cyrillic validation...`);
        try {
            initCyrillicValidation();
            console.log(`‚úÖ Alt Step ${newStep}: Cyrillic validation reinitialized`);
        } catch (error) {
            console.error(`‚ùå Alt Step ${newStep}: Error reinitializing cyrillic validation:`, error);
        }
    }, 300);
    
    reinitializeAllComponents(newStep, 'alt-step-changed');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JS
document.addEventListener('livewire:reinitialize-js', (event) => {
    console.log('üì¢ Reinitialize JS event received');
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    setTimeout(() => {
        console.log('üî§ Reinitialize-JS: Reinitializing cyrillic validation...');
        try {
            initCyrillicValidation();
            console.log('‚úÖ Reinitialize-JS: Cyrillic validation reinitialized');
        } catch (error) {
            console.error('‚ùå Reinitialize-JS: Error reinitializing cyrillic validation:', error);
        }
    }, 350);
    
    reinitializeAllComponents(null, 'reinitialize-js');
});

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è —Å–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ livewire:)
document.addEventListener('reinitialize-js', (event) => {
    console.log('üì¢ Alternative reinitialize-js event received');
    
    setTimeout(() => {
        console.log('üî§ Alt Reinitialize-JS: Reinitializing cyrillic validation...');
        try {
            initCyrillicValidation();
            console.log('‚úÖ Alt Reinitialize-JS: Cyrillic validation reinitialized');
        } catch (error) {
            console.error('‚ùå Alt Reinitialize-JS: Error reinitializing cyrillic validation:', error);
        }
    }, 350);
    
    reinitializeAllComponents(null, 'alt-reinitialize-js');
});

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
function reinitializeAllComponents(step = null, source = 'manual') {
    console.log(`üîÑ Reinitializing all components (source: ${source}, step: ${step})...`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    isInitialized = false;
    
    // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    setTimeout(() => {
        console.log(`üõ†Ô∏è Starting reinitialization process (source: ${source})...`);
        
        // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        console.log('üîß Reinitializing main components...');
        initializeWithRetry(3, 1, true);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        setTimeout(() => {
            console.log('üî§ Reinitializing cyrillic validation...');
            try {
                initCyrillicValidation();
                console.log('‚úÖ Cyrillic validation reinitialized successfully');
            } catch (error) {
                console.error('‚ùå Error reinitializing cyrillic validation:', error);
            }
            
            console.log(`‚úÖ All components reinitialized (source: ${source})`);
        }, 100);
        
    }, 200); // –£–º–µ–Ω—å—à–∞–µ–º –æ–±—â—É—é –∑–∞–¥–µ—Ä–∂–∫—É
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏
window.reinitializeAllComponents = reinitializeAllComponents;

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ–≥–æ
window.quickTest = function() {
    console.log('üöÄ Starting quick test of cyrillic validation...');
    console.log('=====================================');
    
    // 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    testCyrillicValidation();
    
    // 2. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    console.log('\nüîÑ Force reinitializing...');
    forceCyrillicValidation();
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    setTimeout(() => {
        console.log('\n‚úÖ After reinitialization:');
        testCyrillicValidation();
        
        console.log('\nüìã SUMMARY:');
        console.log('- If validation is now working, the issue was initialization timing');
        console.log('- Use forceCyrillicValidation() to reinitialize manually');
        console.log('- Use startAutoReinit() to enable automatic reinitialization');
        console.log('- Use testLatinInput() to test latin validation in real fields');
        console.log('- Use testHobbiesInterests() to test Hobbies & Interests validation');
        console.log('=====================================');
    }, 500);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—è—Ö
window.testLatinInput = function() {
    console.log('üß™ Testing latin input validation in real fields...');
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ–ª—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    const inputs = document.querySelectorAll('input[type="text"], textarea');
    const visibleInputs = Array.from(inputs).filter(input => isElementVisible(input));
    const cyrillicInputs = visibleInputs.filter(input => shouldValidateCyrillic(input));
    
    if (cyrillicInputs.length === 0) {
        console.log('‚ùå No cyrillic validation fields found');
        return;
    }
    
    console.log(`‚úÖ Found ${cyrillicInputs.length} fields with cyrillic validation`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –ø–æ–ª–µ
    const testField = cyrillicInputs[0];
    const originalValue = testField.value;
    const fieldId = testField.id || testField.getAttribute('wire:model');
    
    console.log(`üéØ Testing field: ${fieldId}`);
    console.log('üìù Testing latin input "Hello" (should show error)...');
    
    // –í–≤–æ–¥–∏–º –ª–∞—Ç–∏–Ω—Å–∫–∏–π —Ç–µ–∫—Å—Ç
    testField.value = 'Hello';
    testField.dispatchEvent(new Event('input', { bubbles: true }));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
    setTimeout(() => {
        const errorElement = document.getElementById((testField.id || 'field') + '-cyrillic-error');
        const hasError = errorElement && errorElement.style.display !== 'none';
        
        console.log(`${hasError ? '‚úÖ' : '‚ùå'} Error display: ${hasError ? 'SHOWN' : 'NOT SHOWN'}`);
        console.log(`${testField.classList.contains('border-red-500') ? '‚úÖ' : '‚ùå'} Red border: ${testField.classList.contains('border-red-500') ? 'APPLIED' : 'NOT APPLIED'}`);
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç
        console.log('üìù Testing cyrillic input "–ü—Ä–∏–≤–µ—Ç" (should hide error)...');
        testField.value = '–ü—Ä–∏–≤–µ—Ç';
        testField.dispatchEvent(new Event('input', { bubbles: true }));
        
        setTimeout(() => {
            const errorElement2 = document.getElementById((testField.id || 'field') + '-cyrillic-error');
            const hasError2 = errorElement2 && errorElement2.style.display !== 'none';
            
            console.log(`${!hasError2 ? '‚úÖ' : '‚ùå'} Error hidden: ${!hasError2 ? 'YES' : 'NO'}`);
            console.log(`${!testField.classList.contains('border-red-500') ? '‚úÖ' : '‚ùå'} Red border removed: ${!testField.classList.contains('border-red-500') ? 'YES' : 'NO'}`);
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            testField.value = originalValue;
            testField.dispatchEvent(new Event('input', { bubbles: true }));
            
            console.log('üîÑ Original value restored');
            console.log('=====================================');
            console.log('üéâ Test completed! Check the results above.');
        }, 200);
    }, 200);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏–π
window.testEvents = function() {
    console.log('üß™ Testing Livewire events...');
    
    debugAllEvents();
    
    console.log('\n‚è∞ Watch the console for event responses...');
    console.log('If you see event responses, events are working correctly.');
    console.log('If not, events might not be dispatched from PHP.');
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–î–∞–ª–µ–µ"
window.testStepValidation = function() {
    console.log('üöÄ Testing step validation (server-side)...');
    console.log('===============================================');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞ –∫–∞–∫–æ–º —à–∞–≥–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è
    const stepElements = document.querySelectorAll('[wire\\:if*="currentStep"]');
    let currentStep = null;
    
    stepElements.forEach(el => {
        const condition = el.getAttribute('wire:if');
        if (condition && !el.classList.contains('hidden')) {
            const match = condition.match(/currentStep\s*===\s*(\d+)/);
            if (match) {
                currentStep = parseInt(match[1]);
            }
        }
    });
    
    console.log(`üìç Current step: ${currentStep || 'Unknown'}`);
    
    if (currentStep === 2) {
        console.log('üéØ Perfect! You are on step 2 where Hobbies and Interests are located.');
        console.log('\nüìù Testing server validation:');
        console.log('1. Enter latin text in Hobbies field: "Reading books"');
        console.log('2. Enter latin text in Interests field: "Technology"');
        console.log('3. Click "–î–∞–ª–µ–µ" button');
        console.log('4. Check if validation errors appear from server');
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const hobbiesField = document.querySelector('textarea[wire\\:model="hobbies"]');
        const interestsField = document.querySelector('textarea[wire\\:model="interests"]');
        
        if (hobbiesField && interestsField) {
            console.log('\nüîß Auto-filling fields with latin text for testing...');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            const originalHobbies = hobbiesField.value;
            const originalInterests = interestsField.value;
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –ª–∞—Ç–∏–Ω—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
            hobbiesField.value = 'Reading books, playing games';
            interestsField.value = 'Technology, science';
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –≤ Livewire
            hobbiesField.dispatchEvent(new Event('input', { bubbles: true }));
            interestsField.dispatchEvent(new Event('input', { bubbles: true }));
            
            console.log('‚úÖ Fields filled with latin text');
            console.log('üîò Now click "–î–∞–ª–µ–µ" button to test server validation');
            console.log('‚ö†Ô∏è  Expected: Validation errors should appear');
            
            // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            window.restoreOriginalValues = function() {
                hobbiesField.value = originalHobbies;
                interestsField.value = originalInterests;
                hobbiesField.dispatchEvent(new Event('input', { bubbles: true }));
                interestsField.dispatchEvent(new Event('input', { bubbles: true }));
                console.log('üîÑ Original values restored');
            };
            
            console.log('üìù Use restoreOriginalValues() to restore original text');
        } else {
            console.log('‚ùå Could not find Hobbies/Interests fields');
        }
    } else {
        console.log('‚ö†Ô∏è  You need to be on step 2 to test Hobbies and Interests validation');
        console.log('   Navigate to step 2 and run this function again');
    }
    
    console.log('\n===============================================');
};

// –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –•–æ–±–±–∏ –∏ –ò–Ω—Ç–µ—Ä–µ—Å—ã
window.testHobbiesInterests = function() {
    console.log('üéØ Testing Hobbies and Interests validation...');
    console.log('================================================');
    
    // –ò—â–µ–º –ø–æ–ª—è –•–æ–±–±–∏ –∏ –ò–Ω—Ç–µ—Ä–µ—Å—ã
    const hobbiesField = document.querySelector('textarea[wire\\:model="hobbies"]');
    const interestsField = document.querySelector('textarea[wire\\:model="interests"]');
    
    console.log('üîç Field detection:');
    console.log(`  Hobbies field: ${hobbiesField ? '‚úÖ Found' : '‚ùå Not found'}`);
    console.log(`  Interests field: ${interestsField ? '‚úÖ Found' : '‚ùå Not found'}`);
    
    if (!hobbiesField && !interestsField) {
        console.log('‚ùå No fields found. Make sure you are on step 2.');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ª–∏ –ø–æ–ª—è
    if (hobbiesField) {
        console.log(`  Hobbies initialized: ${hobbiesField.dataset.cyrillicInit === 'true' ? '‚úÖ Yes' : '‚ùå No'}`);
        console.log(`  Hobbies visible: ${isElementVisible(hobbiesField) ? '‚úÖ Yes' : '‚ùå No'}`);
        console.log(`  Should validate cyrillic: ${shouldValidateCyrillic(hobbiesField) ? '‚úÖ Yes' : '‚ùå No'}`);
    }
    
    if (interestsField) {
        console.log(`  Interests initialized: ${interestsField.dataset.cyrillicInit === 'true' ? '‚úÖ Yes' : '‚ùå No'}`);
        console.log(`  Interests visible: ${isElementVisible(interestsField) ? '‚úÖ Yes' : '‚ùå No'}`);
        console.log(`  Should validate cyrillic: ${shouldValidateCyrillic(interestsField) ? '‚úÖ Yes' : '‚ùå No'}`);
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
    console.log('\nüîÑ Force initializing validation...');
    forceCyrillicValidation();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–µ –•–æ–±–±–∏
    if (hobbiesField) {
        console.log('\nüß™ Testing Hobbies field...');
        const originalHobbies = hobbiesField.value;
        
        // –¢–µ—Å—Ç –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        hobbiesField.value = 'Reading books, playing games';
        hobbiesField.dispatchEvent(new Event('input', { bubbles: true }));
        
        setTimeout(() => {
            const errorElement = document.getElementById('hobbies-cyrillic-error') || 
                                 document.querySelector('[data-field="hobbies"].cyrillic-error');
            console.log(`  Latin text error: ${errorElement && errorElement.style.display !== 'none' ? '‚úÖ Shown' : '‚ùå Not shown'}`);
            
            // –¢–µ—Å—Ç –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            hobbiesField.value = '–ß—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥, –∏–≥—Ä—ã';
            hobbiesField.dispatchEvent(new Event('input', { bubbles: true }));
            
            setTimeout(() => {
                const errorElement2 = document.getElementById('hobbies-cyrillic-error') || 
                                     document.querySelector('[data-field="hobbies"].cyrillic-error');
                console.log(`  Cyrillic text error: ${!errorElement2 || errorElement2.style.display === 'none' ? '‚úÖ Hidden' : '‚ùå Still shown'}`);
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                hobbiesField.value = originalHobbies;
                hobbiesField.dispatchEvent(new Event('input', { bubbles: true }));
            }, 300);
        }, 300);
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–µ –ò–Ω—Ç–µ—Ä–µ—Å—ã
    if (interestsField) {
        console.log('\nüß™ Testing Interests field...');
        const originalInterests = interestsField.value;
        
        setTimeout(() => {
            // –¢–µ—Å—Ç –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            interestsField.value = 'Technology, science';
            interestsField.dispatchEvent(new Event('input', { bubbles: true }));
            
            setTimeout(() => {
                const errorElement = document.getElementById('interests-cyrillic-error') || 
                                     document.querySelector('[data-field="interests"].cyrillic-error');
                console.log(`  Latin text error: ${errorElement && errorElement.style.display !== 'none' ? '‚úÖ Shown' : '‚ùå Not shown'}`);
                
                // –¢–µ—Å—Ç –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                interestsField.value = '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –Ω–∞—É–∫–∞';
                interestsField.dispatchEvent(new Event('input', { bubbles: true }));
                
                setTimeout(() => {
                    const errorElement2 = document.getElementById('interests-cyrillic-error') || 
                                         document.querySelector('[data-field="interests"].cyrillic-error');
                    console.log(`  Cyrillic text error: ${!errorElement2 || errorElement2.style.display === 'none' ? '‚úÖ Hidden' : '‚ùå Still shown'}`);
                    
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    interestsField.value = originalInterests;
                    interestsField.dispatchEvent(new Event('input', { bubbles: true }));
                    
                    console.log('\n================================================');
                    console.log('üéâ Test completed! Check results above.');
                    console.log('If validation is not working, try: forceCyrillicValidation()');
                    console.log('================================================');
                }, 300);
            }, 300);
        }, 600);
    }
};

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('load', () => {
    console.log('Window load event fired');
    if (!isInitialized) {
        setTimeout(() => {
            initializeWithRetry();
        }, 300);
    }
});

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π DOM —Å –ø–æ–º–æ—â—å—é MutationObserver
if (typeof MutationObserver !== 'undefined') {
    const observer = new MutationObserver((mutations) => {
        let shouldReinitialize = false;
        
        mutations.forEach((mutation) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                mutation.addedNodes.forEach((node) => {
                    if (node.nodeType === 1) { // Element node
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ –Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                        if (node.id === 'phone-input' || node.id === 'photo-input' || 
                            node.querySelector && (node.querySelector('#phone-input') || node.querySelector('#photo-input'))) {
                            shouldReinitialize = true;
                        }
                    }
                });
            }
        });
        
        if (shouldReinitialize) {
            console.log('MutationObserver detected relevant DOM changes');
            reinitializeOnDOMChange();
        }
    });
    
    // –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
    document.addEventListener('DOMContentLoaded', () => {
        setTimeout(() => {
            observer.observe(document.body, {
                childList: true,
                subtree: true
            });
            console.log('MutationObserver started');
        }, 1000);
    });
} 