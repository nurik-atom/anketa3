<?php

namespace App\Filament\Resources;

use App\Models\Candidate;
use App\Models\GallupReportSheet;
use App\Models\GallupReportSheetValue;
use App\Models\GallupReportSheetIndex;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use App\Filament\Resources\CandidateSearchResource\Pages;

class CandidateSearchResource extends Resource
{
    protected static ?string $model = Candidate::class;

    protected static ?string $navigationIcon = 'heroicon-o-magnifying-glass';
    protected static ?string $navigationLabel = '–ü–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤';
    protected static ?string $modelLabel = '–ü–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤';
    protected static ?string $pluralModelLabel = '–ü–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤';
    protected static ?string $slug = 'candidate-search';
    protected static ?int $navigationSort = 2;

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Section::make('–ü–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤')
                    ->description('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞–π—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤" –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ª–æ–≤–∏–π –ø–æ–∏—Å–∫–∞')
                    ->schema([
                        Forms\Components\Placeholder::make('search_info')
                            ->label('')
                            ->content('–î–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞–π—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤" –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –í—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å–ª–æ–≤–∏–π –ø–æ–∏—Å–∫–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ (–±–æ–ª—å—à–µ, –º–µ–Ω—å—à–µ, —Ä–∞–≤–Ω–æ) –¥–ª—è –ª—é–±—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–∑ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ—Ç—á–µ—Ç–æ–≤.')
                    ])
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->description(function () {
                // –ü–æ–ª—É—á–∞–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
                $search = session('candidate_search', []);
                
                if (empty($search['conditions']) && empty($search['min_age']) && empty($search['max_age']) && empty($search['desired_position']) && empty($search['cities'])) {
                    return '–£—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞–π—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤" –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞.';
                }
                
                $searchBadges = [];
                
                // –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
                if (!empty($search['conditions'])) {
                    foreach ($search['conditions'] as $condition) {
                        if (!isset($condition['characteristic'], $condition['operator'], $condition['value'])) {
                            continue;
                        }
                        
                        $parts = explode('|', $condition['characteristic']);
                        if (count($parts) >= 3) {
                            $reportType = $parts[0];
                            $name = $parts[2];
                            $operatorText = $condition['operator'] === '>=' ? '>' : '<';
                            $conditionText = "{$reportType}: {$name} {$operatorText} {$condition['value']}%";
                            $searchBadges[] = '<span class="inline-flex items-center gap-x-1.5 rounded-md bg-yellow-50 px-2 py-1 text-xs font-medium text-yellow-800 ring-1 ring-inset ring-yellow-600/20">üéØ ' . $conditionText . '</span>';
                        }
                    }
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
                if (!empty($search['min_age']) || !empty($search['max_age'])) {
                    $ageText = '';
                    if (!empty($search['min_age']) && !empty($search['max_age'])) {
                        $ageText = "–æ—Ç {$search['min_age']} –¥–æ {$search['max_age']} –ª–µ—Ç";
                    } elseif (!empty($search['min_age'])) {
                        $ageText = "–æ—Ç {$search['min_age']} –ª–µ—Ç";
                    } else {
                        $ageText = "–¥–æ {$search['max_age']} –ª–µ—Ç";
                    }
                    $searchBadges[] = '<span class="inline-flex items-center gap-x-1.5 rounded-md bg-yellow-50 px-2 py-1 text-xs font-medium text-yellow-800 ring-1 ring-inset ring-yellow-600/20">üë§ ' . $ageText . '</span>';
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
                if (!empty($search['desired_position'])) {
                    $searchBadges[] = '<span class="inline-flex items-center gap-x-1.5 rounded-md bg-yellow-50 px-2 py-1 text-xs font-medium text-yellow-800 ring-1 ring-inset ring-yellow-600/20">üíº "' . $search['desired_position'] . '"</span>';
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥–∞–º
                if (!empty($search['cities'])) {
                    $citiesCount = count($search['cities']);
                    if ($citiesCount == 1) {
                        $cityText = $search['cities'][0];
                    } else {
                        $cityText = implode(', ', $search['cities']) . " ({$citiesCount} –≥–æ—Ä–æ–¥–æ–≤)";
                    }
                    $searchBadges[] = '<span class="inline-flex items-center gap-x-1.5 rounded-md bg-yellow-50 px-2 py-1 text-xs font-medium text-yellow-800 ring-1 ring-inset ring-yellow-600/20">üèôÔ∏è ' . $cityText . '</span>';
                }
                
                return new \Illuminate\Support\HtmlString(
                    '<div class="flex flex-wrap gap-2"><span class="text-sm font-medium text-gray-700">–ê–∫—Ç–∏–≤–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞:</span> ' . 
                    implode(' ', $searchBadges) . 
                    '</div>'
                );
            })
            ->searchable(false)
            ->columns([
                Tables\Columns\TextColumn::make('full_name')
                    ->label('–§–ò–û')
                    ->searchable()
                    ->sortable(),

                Tables\Columns\TextColumn::make('email')
                    ->label('Email')
                    ->searchable(),

                Tables\Columns\TextColumn::make('phone')
                    ->label('–¢–µ–ª–µ—Ñ–æ–Ω'),

                Tables\Columns\TextColumn::make('age')
                    ->label('–í–æ–∑—Ä–∞—Å—Ç')
                    ->getStateUsing(function (Candidate $record) {
                        if (!$record->birth_date) {
                            return '–ù–µ —É–∫–∞–∑–∞–Ω';
                        }
                        
                        $age = $record->birth_date->age;
                        return $age . ' –ª–µ—Ç';
                    })
                    ->sortable(query: function (Builder $query, string $direction): Builder {
                        return $query->orderByRaw("TIMESTAMPDIFF(YEAR, birth_date, CURDATE()) {$direction}");
                    })
                    ->badge()
                    ->color('primary'),

                Tables\Columns\TextColumn::make('current_city')
                    ->label('–ì–æ—Ä–æ–¥')
                    ->getStateUsing(function (Candidate $record) {
                        return $record->current_city ?: '–ù–µ —É–∫–∞–∑–∞–Ω';
                    })
                    ->sortable()
                    ->searchable()
                    ->badge()
                    ->color('success'),

                Tables\Columns\TextColumn::make('desired_position')
                    ->label('–ñ–µ–ª–∞–µ–º–∞—è –ø–æ–∑–∏—Ü–∏—è')
                    ->limit(30),

                Tables\Columns\TextColumn::make('matching_characteristics')
                    ->label('–ü–æ–¥—Ö–æ–¥—è—â–∏–µ —É—Å–ª–æ–≤–∏—è')
                    ->getStateUsing(function (Candidate $record) {
                        // –ü–æ–ª—É—á–∞–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
                        $search = session('candidate_search', []);
                        if (empty($search['conditions'])) {
                            return '–ù–µ —É–∫–∞–∑–∞–Ω—ã —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞';
                        }

                        $matches = [];
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —É—Å–ª–æ–≤–∏–µ
                        foreach ($search['conditions'] as $condition) {
                            if (!isset($condition['characteristic'], $condition['operator'], $condition['value'])) {
                                continue;
                            }
                            
                            $parts = explode('|', $condition['characteristic']);
                            if (count($parts) < 3) continue;
                            
                            [$reportType, $type, $name] = $parts;
                            
                            // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç—á–µ—Ç
                            $sheet = GallupReportSheet::where('name_report', $reportType)->first();
                            if (!$sheet) continue;
                            
                            // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
                            $valueRecord = GallupReportSheetValue::where('gallup_report_sheet_id', $sheet->id)
                                ->where('candidate_id', $record->id)
                                ->where('type', trim($type))
                                ->where('name', trim($name))
                                ->first();
                            
                            if (!$valueRecord) continue;
                            
                            $candidateValue = $valueRecord->value;
                            $conditionValue = $condition['value'];
                            $operator = $condition['operator'];
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Å–ª–æ–≤–∏—é
                            $conditionMet = false;
                            switch ($operator) {
                                case '>=':
                                    $conditionMet = $candidateValue >= $conditionValue;
                                    break;
                                case '<=':
                                    $conditionMet = $candidateValue <= $conditionValue;
                                    break;
                            }
                            
                            if ($conditionMet) {
                                $matches[] = "{$reportType}: {$name} = {$candidateValue}% ({$operator} {$conditionValue}%)";
                            }
                        }

                        return empty($matches) ? '–ù–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π' : implode(', ', $matches);
                    })
                    ->wrap()
                    ->color(fn (string $state): string => $state === '–ù–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π' ? 'danger' : 'success'),
            ])
            ->filters([
                //
            ])
            ->actions([
                Tables\Actions\ViewAction::make()
                    ->label('–ü—Ä–æ—Å–º–æ—Ç—Ä')
                    ->url(fn (Candidate $record): string => 
                        route('candidate.report', $record)),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    //
                ]),
            ])
            ->modifyQueryUsing(function (Builder $query) {
                // –ü–æ–ª—É—á–∞–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
                $search = session('candidate_search', []);
                
                if (empty($search['conditions']) && empty($search['min_age']) && empty($search['max_age']) && empty($search['desired_position']) && empty($search['cities'])) {
                    // –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç—É—é —Ç–∞–±–ª–∏—Ü—É
                    return $query->whereRaw('1 = 0');
                }

                $candidateIds = collect();
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if (!empty($search['conditions'])) {
                    foreach ($search['conditions'] as $condition) {
                        if (!isset($condition['characteristic'], $condition['operator'], $condition['value'])) {
                            continue;
                        }
                        
                        $parts = explode('|', $condition['characteristic']);
                        if (count($parts) < 3) continue;
                        
                        [$reportType, $type, $name] = $parts;
                        
                        // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç—á–µ—Ç
                        $sheet = GallupReportSheet::where('name_report', $reportType)->first();
                        if (!$sheet) continue;
                        
                        $conditionValue = $condition['value'];
                        $operator = $condition['operator'];
                        
                        // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
                        $valueQuery = GallupReportSheetValue::where('gallup_report_sheet_id', $sheet->id)
                            ->where('type', trim($type))
                            ->where('name', trim($name));
                        
                        switch ($operator) {
                            case '>=':
                                $valueQuery->where('value', '>=', $conditionValue);
                                break;
                            case '<=':
                                $valueQuery->where('value', '<=', $conditionValue);
                                break;
                            default:
                                continue 2; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
                        }
                        
                        $ids = $valueQuery->pluck('candidate_id');
                        $candidateIds = $candidateIds->merge($ids);
                    }
                }
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
                $ageCandidateIds = collect();
                if (!empty($search['min_age']) || !empty($search['max_age'])) {
                    $ageQuery = $query->newQuery();
                    
                    if (!empty($search['min_age'])) {
                        // –ö–∞–Ω–¥–∏–¥–∞—Ç—ã —Å—Ç–∞—Ä—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞
                        $maxBirthDate = now()->subYears($search['min_age'])->format('Y-m-d');
                        $ageQuery->where('birth_date', '<=', $maxBirthDate);
                    }
                    
                    if (!empty($search['max_age'])) {
                        // –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –º–ª–∞–¥—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞
                        $minBirthDate = now()->subYears($search['max_age'] + 1)->addDay()->format('Y-m-d');
                        $ageQuery->where('birth_date', '>=', $minBirthDate);
                    }
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ —á—Ç–æ birth_date –Ω–µ null
                    $ageQuery->whereNotNull('birth_date');
                    
                    $ageCandidateIds = $ageQuery->pluck('id');
                }
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
                $positionCandidateIds = collect();
                if (!empty($search['desired_position'])) {
                    $positionQuery = $query->newQuery();
                    $positionQuery->where('desired_position', 'LIKE', '%' . $search['desired_position'] . '%')
                                  ->whereNotNull('desired_position');
                    
                    $positionCandidateIds = $positionQuery->pluck('id');
                }
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥–∞–º
                $cityCandidateIds = collect();
                if (!empty($search['cities']) && is_array($search['cities'])) {
                    $cityQuery = $query->newQuery();
                    $cityQuery->whereIn('current_city', $search['cities'])
                              ->whereNotNull('current_city');
                    
                    $cityCandidateIds = $cityQuery->pluck('id');
                }
                
                // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                $finalCandidateIds = collect();
                
                // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤
                $hasCharacteristicFilter = !empty($search['conditions']) && !$candidateIds->isEmpty();
                $hasAgeFilter = (!empty($search['min_age']) || !empty($search['max_age'])) && !$ageCandidateIds->isEmpty();
                $hasPositionFilter = !empty($search['desired_position']) && !$positionCandidateIds->isEmpty();
                $hasCityFilter = !empty($search['cities']) && !$cityCandidateIds->isEmpty();
                
                // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
                $activeFiltersCount = ($hasCharacteristicFilter ? 1 : 0) + ($hasAgeFilter ? 1 : 0) + ($hasPositionFilter ? 1 : 0) + ($hasCityFilter ? 1 : 0);
                
                // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤ - –±–µ—Ä–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
                if ($activeFiltersCount > 1) {
                    $finalCandidateIds = collect();
                    
                    if ($hasCharacteristicFilter) {
                        $finalCandidateIds = $candidateIds->unique();
                    }
                    
                    if ($hasAgeFilter) {
                        if ($finalCandidateIds->isEmpty()) {
                            $finalCandidateIds = $ageCandidateIds;
                        } else {
                            $finalCandidateIds = $finalCandidateIds->intersect($ageCandidateIds);
                        }
                    }
                    
                    if ($hasPositionFilter) {
                        if ($finalCandidateIds->isEmpty()) {
                            $finalCandidateIds = $positionCandidateIds;
                        } else {
                            $finalCandidateIds = $finalCandidateIds->intersect($positionCandidateIds);
                        }
                    }
                    
                    if ($hasCityFilter) {
                        if ($finalCandidateIds->isEmpty()) {
                            $finalCandidateIds = $cityCandidateIds;
                        } else {
                            $finalCandidateIds = $finalCandidateIds->intersect($cityCandidateIds);
                        }
                    }
                } else {
                    // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    if ($hasCharacteristicFilter) {
                        $finalCandidateIds = $candidateIds->unique();
                    } elseif ($hasAgeFilter) {
                        $finalCandidateIds = $ageCandidateIds;
                    } elseif ($hasPositionFilter) {
                        $finalCandidateIds = $positionCandidateIds;
                    } elseif ($hasCityFilter) {
                        $finalCandidateIds = $cityCandidateIds;
                    }
                }
                
                if ($finalCandidateIds->isEmpty()) {
                    return $query->whereRaw('1 = 0');
                }
                
                return $query->whereIn('id', $finalCandidateIds);
            });
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\SearchCandidates::route('/'),
        ];
    }
} 